from mock import patch
import unittest
import pycgm_calc as axis # Need to fix import not to require file locally.
import numpy as np
import pytest

rounding_precision = 5
rand_num = np.random.randint(0, 10)
nan_3d = [np.nan, np.nan, np.nan]
nan = np.nan

class TestUpperBodyAxis:
    """
    This class tests the upper body axis functions in pyCGM.py:
        wrist_axis
    """

    @pytest.mark.parametrize(
        ["elbow_jc", "expected"],
        [
            # Test from running sample data
            (
                [
                    np.array([[0.14362551, -0.9896311, -0.00141034, 633.66707587],
                            [0.68540404, 0.09844474, 0.7214776, 304.95542115],
                            [-0.71385783, -0.10458925, 0.69243634, 1256.07799541],
                            [0.0, 0.0, 0.0, 1.0]]
                    ), np.array([[-0.15439575, -0.98643527, -0.05574424, -129.16952218],
                            [0.71835083, -0.07334106, -0.69180429, 316.8671644],
                            [0.67833181, -0.14685556, 0.71993014, 1258.06440717],
                            [0.0, 0.0, 0.0, 1.0]]
                    ), np.array([[[   1, 0, 0, 793.32814303],
                                [   0, 1, 0, 451.29134788],
                                [   0, 0, 1, 1084.4325513 ],
                                [   0, 0, 0, 1        ]],
                                [[   1, 0, 0, -272.45941897],
                                [   0, 1, 0, 485.80152211],
                                [   0, 0, 1, 1091.36662384],
                                [   0, 0, 0, 1.        ]]])
                ],[
                    np.array([[0.44319425, -0.84255601, -0.30606899, 793.32814303],
                            [0.68540404, 0.09844474, 0.7214776, 451.29134788],
                            [-0.57775441, -0.52953565, 0.62112144, 1084.4325513],
                            [0.0, 0.0, 0.0, 1.0]]
                    ), np.array([[-0.46565384, -0.78949793, -0.39982436, -272.45941897],
                            [0.71835083, -0.07334106, -0.69180429, 485.80152211],
                            [0.51685451, -0.60935549, 0.60128804, 1091.36662384],
                            [0.0, 0.0, 0.0, 1.0]]
                    ),
                ],
            ),
            # Test with zeros for all params
            (
                [np.array([[0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ), np.array([[0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ), np.array([[[1, 0, 0, 0],
                                [0, 1, 0, 0],
                                [0, 0, 1, 0],
                                [0, 0, 0, 1]],
                                [[1, 0, 0, 0],
                                [0, 1, 0, 0],
                                [0, 0, 1, 0],
                                [0, 0, 0, 1]]]),
                ], [np.array([[nan, nan, nan, 0.0],
                            [nan, nan, nan, 0.0],
                            [nan, nan, nan, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ), np.array([[nan, nan, nan, 0.0],
                            [nan, nan, nan, 0.0],
                            [nan, nan, nan, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    )
                ]
            ),
            # Testing when adding values in elbow_jc[0]
            (
                [np.array([[-9.0, 5.0, -7.0, 9.0],
                            [-9.0, 5.0, -7.0, -5.0],
                            [-9.0, 5.0, -7.0, 7.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[1.0, -6.0, -4.0, -1.0],
                            [1.0, -6.0, -4.0, 6.0],
                            [1.0, -6.0, -4.0, 4.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[[1, 0, 0, 0],
                            [0, 1, 0, 0],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 0],
                            [0, 1, 0, 0],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]])
                ], [np.array([[nan, nan, nan, 0.0],
                            [-0.7228974, 0.40160966, -0.56225353, 0.0],
                            [nan, nan, nan, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[nan, nan, nan, 0.0],
                            [0.13736056, -0.82416338, -0.54944226, 0.0],
                            [nan, nan, nan, 0.0],
                            [0.0, 0.0, 0.0, 1.0]
                        ]
                    )
                ]
            ),
            # Testing when adding values in elbow_jc[1]
            (
                [np.array([[-3.0, -9.0, 6.0, 0.0],
                            [4.0, -5.0, 5.0, 0.0],
                            [-9.0, 7.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]), 
                    np.array([[4.0, -1.0, 0.0, 0.0],
                            [3.0, -5.0, 1.0, 0.0],
                            [0.0, -9.0, 7.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[[1, 0, 0, 0],
                            [0, 1, 0, 0],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 0],
                            [0, 1, 0, 0],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]])
                ], [np.array([[nan, nan, nan, 0.0],
                            [0.49236596, -0.61545745, 0.61545745, 0.0],
                            [nan, nan, nan, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]), 
                    np.array([[nan, nan, nan, 0.0],
                            [0.50709255, -0.84515425, 0.16903085, 0.0],
                            [nan, nan, nan, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ),
                ],
            ),
            # Testing when adding values in elbow_jc[2]
            (
                [np.array([[0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]), 
                    np.array([[0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                    ]),
                    np.array([[[1, 0, 0, 6],
                            [0, 1, 0, -1],
                            [0, 0, 1, 5],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 7],
                            [0, 1, 0, 6],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]])
                ], [np.array([[nan, nan, nan, 6.0],
                            [nan, nan, nan, -1.0],
                            [nan, nan, nan, 5.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[nan, nan, nan, 7.0],
                            [nan, nan, nan, 6.0],
                            [nan, nan, nan, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ),
                ],
            ),
            # Testing when adding values in elbow_jc[0] and elbow_jc[1]
            (
                [np.array([[-12.0, -4.0, -1.0, 9.0],
                            [-5.0, 0.0, -2.0, -5.0],
                            [-18.0, 12.0, -7.0, 7.0],
                            [0.0, 0.0, 0.0, 1.0],]),
                    np.array([[5.0, -7.0, -4.0, -1.0],
                            [4.0, -11.0, -3.0, 6.0],
                            [1.0, -15.0, 3.0, 4.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[[1, 0, 0, 0],
                            [0, 1, 0, 0],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 0],
                            [0, 1, 0, 0],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]]),
                ],
                [np.array([[-0.31403715, 0.53386315, 0.78509287, 0.0],
                            [-0.92847669, 0.0, -0.37139068, 0.0],
                            [-0.1982718, -0.84557089, 0.49567949, 0.0],
                            [0.0, 0.0, 0.0, 1.0],]),
                    np.array([[-0.81649658, -0.40824829, 0.40824829, 0.0],
                            [0.33104236, -0.91036648, -0.24828177, 0.0],
                            [0.47301616, -0.06757374, 0.87845859, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
            # Testing when adding values in elbow_jc[0] and elbow_jc[2]
            (
                [np.array([[-9.0, 5.0, -7.0, 9.0],
                            [-9.0, 5.0, -7.0, -5.0],
                            [-9.0, 5.0, -7.0, 7.0],
                            [0.0, 0.0, 0.0, 1.0],]),
                    np.array([[1.0, -6.0, -4.0, -1.0],
                            [1.0, -6.0, -4.0, 6.0],
                            [1.0, -6.0, -4.0, 4.0],
                            [0.0, 0.0, 0.0, 1.0],]),
                    np.array([[[1, 0, 0, 6],
                            [0, 1, 0, -1],
                            [0, 0, 1, 5],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 7],
                            [0, 1, 0, 6],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]]),
                ], [np.array([[-0.64699664, -0.10783277, 0.75482941, 6.0],
                            [-0.7228974, 0.40160966, -0.56225353, -1.0],
                            [-0.24251743, -0.90944036, -0.33779213, 5.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[-0.39649116, 0.46257302, -0.79298232, 7.0],
                            [0.13736056, -0.82416338, -0.54944226, 6.0],
                            [-0.90770416, -0.3267735, 0.26323421, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
            # Testing when adding values in elbow_jc[1] and elbow_jc[2]
            (
                [np.array([[-3.0, -9.0, 6.0, 0.0],
                            [4.0, -5.0, 5.0, 0.0],
                            [-9.0, 7.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[4.0, -1.0, 0.0, 0.0],
                            [3.0, -5.0, 1.0, 0.0],
                            [0.0, -9.0, 7.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[[1, 0, 0, 6],
                            [0, 1, 0, -1],
                            [0, 0, 1, 5],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 7],
                            [0, 1, 0, 6],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]]),
                ], [
                    np.array([[0.58321184, -0.29160592, -0.7581754, 6.0],
                            [0.49236596, -0.61545745, 0.61545745, -1.0],
                            [-0.64609574, -0.73224184, -0.21536525, 5.0],
                            [0.0, 0.0, 0.0, 1.0],]),
                    np.array([[0.11153264, -0.13012141, -0.985205, 7.0],
                            [0.50709255, -0.84515425, 0.16903085, 6.0],
                            [-0.85464473, -0.51844257, -0.02827869, 0.0],
                            [0.0, 0.0, 0.0, 1.0]])
                ],
            ),
            # Testing when adding values in elbow_jc
            (
                [
                    np.array([[-12.0, -4.0, -1.0, 9.0],
                            [-5.0, 0.0, -2.0, -5.0],
                            [-18.0, 12.0, -7.0, 7.0],
                            [0.0, 0.0, 0.0, 1.0]]), 
                    np.array([[5.0, -7.0, -4.0, -1.0],
                            [4.0, -11.0, -3.0, 6.0],
                            [1.0, -15.0, 3.0, 4.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[[1, 0, 0, 6],
                            [0, 1, 0, -1],
                            [0, 0, 1, 5],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 7],
                            [0, 1, 0, 6],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]]),
                ], [
                    np.array([[-0.36514837, 0.18257419, 0.91287093, 6.0],
                            [-0.92847669, 0.0, -0.37139068, -1.0],
                            [-0.06780635, -0.98319208, 0.16951588, 5.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[-0.44574249, 0.08104409, -0.89148499, 7.0],
                            [0.33104236, -0.91036648, -0.24828177, 6.0],
                            [-0.83169982, -0.40578902, 0.37896, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    )
                ],
            ),
            # Testing that when elbow_jc is composed of lists of ints
            (
                [np.array([[-12.0, -4.0, -1.0, 9.0],
                            [-5.0, 0.0, -2.0, -5.0],
                            [-18.0, 12.0, -7.0, 7.0],
                            [0.0, 0.0, 0.0, 1.0]]), 
                np.array([[5.0, -7.0, -4.0, -1.0],
                            [4.0, -11.0, -3.0, 6.0],
                            [1.0, -15.0, 3.0, 4.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[[1, 0, 0, 6],
                            [0, 1, 0, -1],
                            [0, 0, 1, 5],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 7],
                            [0, 1, 0, 6],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]]),
                ],
                [np.array([[-0.36514837, 0.18257419, 0.91287093, 6.0],
                            [-0.92847669, 0.0, -0.37139068, -1.0],
                            [-0.06780635, -0.98319208, 0.16951588, 5.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                np.array([[-0.44574249, 0.08104409, -0.89148499, 7.0],
                            [0.33104236, -0.91036648, -0.24828177, 6.0],
                            [-0.83169982, -0.40578902, 0.37896, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ),
                ],
            ),
            # Testing that when elbow_jc is composed of numpy arrays of ints
            (
                [np.array([[-12.0, -4.0, -1.0, 9.0],
                            [-5.0, 0.0, -2.0, -5.0],
                            [-18.0, 12.0, -7.0, 7.0],
                            [0.0, 0.0, 0.0, 1.0]], dtype="int"),
                np.array([[5.0, -7.0, -4.0, -1.0],
                            [4.0, -11.0, -3.0, 6.0],
                            [1.0, -15.0, 3.0, 4.0],
                            [0.0, 0.0, 0.0, 1.0]], dtype="int",),
                np.array([[[1, 0, 0, 6],
                            [0, 1, 0, -1],
                            [0, 0, 1, 5],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 7],
                            [0, 1, 0, 6],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]], dtype="int"),
                ], [np.array([[-0.36514837, 0.18257419, 0.91287093, 6.0],
                            [-0.92847669, 0.0, -0.37139068, -1.0],
                            [-0.06780635, -0.98319208, 0.16951588, 5.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[-0.44574249, 0.08104409, -0.89148499, 7.0],
                            [0.33104236, -0.91036648, -0.24828177, 6.0],
                            [-0.83169982, -0.40578902, 0.37896, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ),
                ],
            ),
            # Testing that when elbow_jc is composed of lists of floats
            (
                [np.array([[-12.0, -4.0, -1.0, 9.0],
                            [-5.0, 0.0, -2.0, -5.0],
                            [-18.0, 12.0, -7.0, 7.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                np.array([[5.0, -7.0, -4.0, -1.0],
                            [4.0, -11.0, -3.0, 6.0],
                            [1.0, -15.0, 3.0, 4.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                np.array([[[1.0, 0.0, 0.0, 6.0],
                            [0.0, 1.0, 0.0, -1.0],
                            [0.0, 0.0, 1.0, 5.0],
                            [0.0, 0.0, 0.0, 1.0]],
                            [[1.0, 0.0, 0.0, 7.0],
                            [0.0, 1.0, 0.0, 6.0],
                            [0.0, 0.0, 1.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]]),
                ], [np.array([[-0.36514837, 0.18257419, 0.91287093, 6.0],
                            [-0.92847669, 0.0, -0.37139068, -1.0],
                            [-0.06780635, -0.98319208, 0.16951588, 5.0],
                            [0.0, 0.0, 0.0, 1.0]]), 
                    np.array([[-0.44574249, 0.08104409, -0.89148499, 7.0],
                            [0.33104236, -0.91036648, -0.24828177, 6.0],
                            [-0.83169982, -0.40578902, 0.37896, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ),
                ],
            ),
            # Testing that when elbow_jc is composed of numpy arrays of floats
            (
                [np.array([[-12.0, -4.0, -1.0, 9.0],
                            [-5.0, 0.0, -2.0, -5.0],
                            [-18.0, 12.0, -7.0, 7.0],
                            [0.0, 0.0, 0.0, 1.0]], dtype="float"), 
                    np.array([[5.0, -7.0, -4.0, -1.0],
                            [4.0, -11.0, -3.0, 6.0],
                            [1.0, -15.0, 3.0, 4.0],
                            [0.0, 0.0, 0.0, 1.0]], dtype="float"),
                    np.array([[[1.0, 0.0, 0.0, 6.0],
                                [0.0, 1.0, 0.0, -1.0],
                                [0.0, 0.0, 1.0, 5.0],
                                [0.0, 0.0, 0.0, 1.0]],
                                [[1.0, 0.0, 0.0, 7.0],
                                [0.0, 1.0, 0.0, 6.0],
                                [0.0, 0.0, 1.0, 0.0],
                                [0.0, 0.0, 0.0, 1.0]]], dtype="float"),
                ], [
                    np.array([[-0.36514837, 0.18257419, 0.91287093, 6.0],
                            [-0.92847669, 0.0, -0.37139068, -1.0],
                            [-0.06780635, -0.98319208, 0.16951588, 5.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ), np.array([[-0.44574249, 0.08104409, -0.89148499, 7.0],
                            [0.33104236, -0.91036648, -0.24828177, 6.0],
                            [-0.83169982, -0.40578902, 0.37896, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
        ],
    )
    def testWristJointCenter(self, elbow_jc, expected):
        """
        This test provides coverage of the wrist_axis function in pyCGM.py, defined as wrist_axis(elbow_jc)

        This test takes 2 parameters:
        elbow_jc: array containing the x,y,z position of the elbow joint center
        expected: the expected result from calling wrist_axis on elbow_jc

        This test is checking to make sure the wrist joint axis is calculated correctly given the input parameters.

        The REJC and LEJC markers are calculated from the positions in the elbow joint center.
        The RWJC and LWJC markers that are found in the radius are calculated by subtracting the respective
        direction of each elbow axis position from the respective EJC marker.
        The RWJC and LWJC are then used as the origin for the wrist.

        Lastly, it checks that the resulting output is correct when elbow_jc is composed of lists of ints, numpy arrays
        of ints, lists of floats, and numpy arrays of floats.
        """
        result = axis.CalcAxes().rad_axis(elbow_jc)
        np.testing.assert_almost_equal(result[0], expected[0], rounding_precision)
        np.testing.assert_almost_equal(result[1], expected[1], rounding_precision)

    @pytest.mark.parametrize(["rwra", "rwrb", "lwra", "lwrb", "rfin", "lfin", "wrist_jc", "r_hand_thickness", "l_hand_thickness", "mock_return_val", "expected_mock_args", "expected",],
        [
            # Test from running sample data
            (
                np.array([776.51898193, 495.68103027, 1108.38464355]), np.array([830.9072876, 436.75341797, 1119.11901855]),
                np.array([-249.28146362, 525.32977295, 1117.09057617]), np.array([-311.77532959, 477.22512817, 1125.1619873]),
                np.array([863.71374512, 524.4475708, 1074.54248047]), np.array([-326.65890503, 558.34338379, 1091.04284668]),
                [
                    [
                        [rand_num, rand_num, rand_num, 793.3281430325068],
                        [rand_num, rand_num, rand_num, 451.2913478825204],
                        [rand_num, rand_num, rand_num, 1084.4325513020426],
                        [0, 0, 0, 1],
                    ],
                    [
                        [rand_num, rand_num, rand_num, -272.4594189740742],
                        [rand_num, rand_num, rand_num, 485.801522109477],
                        [rand_num, rand_num, rand_num, 1091.3666238350822],
                        [0, 0, 0, 1],
                    ],
                ],
                34.0,
                34.0,
                [ [-324.53477798, 551.88744289, 1068.02526837], [859.80614366, 517.28239823, 1051.97278945] ],
                [
                    [
                        [-280.528396605, 501.27745056000003, 1121.126281735],
                        [-272.4594189740742, 485.801522109477, 1091.3666238350822],
                        [-326.65890503, 558.34338379, 1091.04284668],
                        24.0,
                    ],
                    [
                        [803.713134765, 466.21722411999997, 1113.75183105],
                        [793.3281430325068, 451.2913478825204, 1084.4325513020426],
                        [863.71374512, 524.4475708, 1074.54248047],
                        24.0,
                    ],
                ],
                [
                    np.array(
                        [
                            [0.15061613, 0.31001409, 0.93872576, 859.80614366],
                            [-0.72638693, 0.67880636, -0.10762882, 517.28239823],
                            [-0.67057946, -0.66566748, 0.32742937, 1051.97278944],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                    np.array(
                        [
                            [-0.08516279, 0.27149019, 0.95866593, -324.53477798],
                            [-0.79815387, -0.59451803, 0.09746127, 551.88744289],
                            [0.59640397, -0.75686285, 0.26732176, 1068.02526837],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
            # Testing when values are added to wrist_jc
            (
                np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]),
                [
                    [
                        [rand_num, rand_num, rand_num, 0],
                        [rand_num, rand_num, rand_num, 4],
                        [rand_num, rand_num, rand_num, 3],
                        [0, 0, 0, 1],
                    ],
                    [
                        [rand_num, rand_num, rand_num, 9],
                        [rand_num, rand_num, rand_num, 0],
                        [rand_num, rand_num, rand_num, -6],
                        [0, 0, 0, 1],
                    ],
                ],
                0.0,
                0.0,
                [[0, 0, 0], [0, 0, 0]],
                [ [[0, 0, 0], [9, 0, -6], [0, 0, 0], 7.0], [[0, 0, 0], [0, 4, 3], [0, 0, 0], 7.0], ],
                [
                    np.array(
                        [
                            [nan, nan, nan, 0.0],
                            [nan, nan, nan, 0.0],
                            [0.0, 0.8, 0.6, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                    np.array(
                        [
                            [nan, nan, nan, 0.0],
                            [nan, nan, nan, 0.0],
                            [0.83205029, 0.0, -0.5547002, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
            # Testing when values are added to wrist_jc, frame['RFIN'] and frame['LFIN']
            (
                np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([1, -9, 6]), np.array([-6, 3, 8]),
                [
                    [
                        [rand_num, rand_num, rand_num, 0],
                        [rand_num, rand_num, rand_num, 4],
                        [rand_num, rand_num, rand_num, 3],
                        [0, 0, 0, 1],
                    ],
                    [
                        [rand_num, rand_num, rand_num, 9],
                        [rand_num, rand_num, rand_num, 0],
                        [rand_num, rand_num, rand_num, -6],
                        [0, 0, 0, 1],
                    ],
                ],
                0.0,
                0.0,
                [[0, 0, 0], [0, 0, 0]],
                [
                    [[0, 0, 0], [9, 0, -6], [-6, 3, 8], 7.0],
                    [[0, 0, 0], [0, 4, 3], [1, -9, 6], 7.0],
                ],
                [
                    np.array(
                        [
                            [nan, nan, nan, 0.0],
                            [nan, nan, nan, 0.0],
                            [0.0, 0.8, 0.6, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                    np.array(
                        [
                            [nan, nan, nan, 0.0],
                            [nan, nan, nan, 0.0],
                            [0.83205029, 0.0, -0.5547002, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
            # Testing when values are added to wrist_jc, frame['RFIN'], frame['LFIN'], frame['RWRA'], and frame['LWRA']
            (
                np.array([4, 7, 6]), np.array([0, 0, 0]), np.array([-4, 5, 3]), np.array([0, 0, 0]), np.array([1, -9, 6]), np.array([-6, 3, 8]),
                [
                    [
                        [rand_num, rand_num, rand_num, 0],
                        [rand_num, rand_num, rand_num, 4],
                        [rand_num, rand_num, rand_num, 3],
                        [0, 0, 0, 1],
                    ],
                    [
                        [rand_num, rand_num, rand_num, 9],
                        [rand_num, rand_num, rand_num, 0],
                        [rand_num, rand_num, rand_num, -6],
                        [0, 0, 0, 1],
                    ],
                ],
                0.0,
                0.0,
                [[0, 0, 0], [0, 0, 0]],
                [ [[-2.0, 2.5, 1.5], [9, 0, -6], [-6, 3, 8], 7.0], [[2.0, 3.5, 3.0], [0, 4, 3], [1, -9, 6], 7.0], ],
                [
                    np.array(
                        [
                            [-0.14834045, -0.59336181, 0.79114908, 0.0],
                            [0.98893635, -0.08900427, 0.11867236, 0.0],
                            [0.0, 0.8, 0.6, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                    np.array(
                        [
                            [0.55384878, -0.05538488, 0.83077316, 0.0],
                            [-0.030722, -0.99846508, -0.046083, 0.0],
                            [0.83205029, 0.0, -0.5547002, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
            # Testing when values are added to frame and wrist_jc
            (
                np.array([4, 7, 6]), np.array([0, -5, 4]), np.array([-4, 5, 3]), np.array([-3, 2, -7]), np.array([1, -9, 6]), np.array([-6, 3, 8]),
                [
                    [
                        [rand_num, rand_num, rand_num, 0],
                        [rand_num, rand_num, rand_num, 4],
                        [rand_num, rand_num, rand_num, 3],
                        [0, 0, 0, 1],
                    ],
                    [
                        [rand_num, rand_num, rand_num, 9],
                        [rand_num, rand_num, rand_num, 0],
                        [rand_num, rand_num, rand_num, -6],
                        [0, 0, 0, 1],
                    ],
                ],
                0.0,
                0.0,
                [[0, 0, 0], [0, 0, 0]],
                [
                    [[-3.5, 3.5, -2.0], [9, 0, -6], [-6, 3, 8], 7.0],
                    [[2.0, 1.0, 5.0], [0, 4, 3], [1, -9, 6], 7.0],
                ],
                [
                    np.array(
                        [
                            [0.81373347, -0.34874292, 0.46499055, 0.0],
                            [0.58123819, 0.48824008, -0.65098678, 0.0],
                            [0.0, 0.8, 0.6, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                    np.array(
                        [
                            [0.19988898, -0.93281525, 0.29983347, 0.0],
                            [-0.5174328, -0.36035499, -0.7761492, 0.0],
                            [0.83205029, 0.0, -0.5547002, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
            # Testing when values are added to frame, wrist_jc, r_hand_thickness, and l_hand_thickness
            (
                np.array([4, 7, 6]), np.array([0, -5, 4]), np.array([-4, 5, 3]), np.array([-3, 2, -7]), np.array([1, -9, 6]), np.array([-6, 3, 8]),
                [
                    [
                        [rand_num, rand_num, rand_num, 0],
                        [rand_num, rand_num, rand_num, 4],
                        [rand_num, rand_num, rand_num, 3],
                        [0, 0, 0, 1],
                    ],
                    [
                        [rand_num, rand_num, rand_num, 9],
                        [rand_num, rand_num, rand_num, 0],
                        [rand_num, rand_num, rand_num, -6],
                        [0, 0, 0, 1],
                    ],
                ],
                36.0,
                -9.0,
                [[0, 0, 0], [0, 0, 0]],
                [
                    [[-3.5, 3.5, -2.0], [9, 0, -6], [-6, 3, 8], 2.5],
                    [[2.0, 1.0, 5.0], [0, 4, 3], [1, -9, 6], 25.0],
                ],
                [
                    np.array(
                        [
                            [0.81373347, -0.34874292, 0.46499055, 0.0],
                            [0.58123819, 0.48824008, -0.65098678, 0.0],
                            [0.0, 0.8, 0.6, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                    np.array(
                        [
                            [0.19988898, -0.93281525, 0.29983347, 0.0],
                            [-0.5174328, -0.36035499, -0.7761492, 0.0],
                            [0.83205029, 0.0, -0.5547002, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
            # Testing when values are added to frame, wrist_jc, r_hand_thickness, l_hand_thickness, and mock_return_val
            (
                np.array([4, 7, 6]), np.array([0, -5, 4]), np.array([-4, 5, 3]), np.array([-3, 2, -7]), np.array([1, -9, 6]), np.array([-6, 3, 8]),
                [
                    [
                        [rand_num, rand_num, rand_num, 0],
                        [rand_num, rand_num, rand_num, 4],
                        [rand_num, rand_num, rand_num, 3],
                        [0, 0, 0, 1],
                    ],
                    [
                        [rand_num, rand_num, rand_num, 9],
                        [rand_num, rand_num, rand_num, 0],
                        [rand_num, rand_num, rand_num, -6],
                        [0, 0, 0, 1],
                    ],
                ],
                36.0,
                -9.0,
                [[-6, 4, -4], [2, 8, 1]],
                [
                    [[-3.5, 3.5, -2.0], [9, 0, -6], [-6, 3, 8], 2.5],
                    [[2.0, 1.0, 5.0], [0, 4, 3], [1, -9, 6], 25.0],
                ],
                [
                    np.array(
                        [
                            [0.91168461, -0.34188173, 0.22792115, 2.0],
                            [-0.04652421, 0.46524211, 0.88396, 8.0],
                            [-0.40824829, -0.81649658, 0.40824829, 1.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                    np.array(
                        [
                            [-0.21615749, -0.94092085, 0.2606605, -6.0],
                            [-0.18683841, -0.22217524, -0.9569376, 4.0],
                            [0.95831485, -0.25555063, -0.12777531, -4.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
            # Testing that when frame and wrist_jc are composed of lists of ints and r_hand_thickness, and l_hand_thickness values are ints
            (
                [4, 7, 6], [0, -5, 4], [-4, 5, 3], [-3, 2, -7], [1, -9, 6], [-6, 3, 8],
                [
                    [
                        [rand_num, rand_num, rand_num, 0],
                        [rand_num, rand_num, rand_num, 4],
                        [rand_num, rand_num, rand_num, 3],
                        [0, 0, 0, 1],
                    ],
                    [
                        [rand_num, rand_num, rand_num, 9],
                        [rand_num, rand_num, rand_num, 0],
                        [rand_num, rand_num, rand_num, -6],
                        [0, 0, 0, 1],
                    ],
                ],
                36,
                -9,
                [[-6, 4, -4], [2, 8, 1]],
                [
                    [[-3.5, 3.5, -2.0], [9, 0, -6], [-6, 3, 8], 2.5],
                    [[2.0, 1.0, 5.0], [0, 4, 3], [1, -9, 6], 25.0],
                ],
                [
                    np.array(
                        [
                            [0.91168461, -0.34188173, 0.22792115, 2.0],
                            [-0.04652421, 0.46524211, 0.88396, 8.0],
                            [-0.40824829, -0.81649658, 0.40824829, 1.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                    np.array(
                        [
                            [-0.21615749, -0.94092085, 0.2606605, -6.0],
                            [-0.18683841, -0.22217524, -0.9569376, 4.0],
                            [0.95831485, -0.25555063, -0.12777531, -4.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
            # Testing that when frame and wrist_jc are composed of numpy arrays of ints and r_hand_thickness, and l_hand_thickness values are ints
            (
                np.array([4, 7, 6]), np.array([0, -5, 4]), np.array([-4, 5, 3]), np.array([-3, 2, -7]), np.array([1, -9, 6]), np.array([-6, 3, 8]),
                np.array(
                    [
                        [
                            [rand_num, rand_num, rand_num, 0],
                            [rand_num, rand_num, rand_num, 4],
                            [rand_num, rand_num, rand_num, 3],
                            [0, 0, 0, 1],
                        ],
                        [
                            [rand_num, rand_num, rand_num, 9],
                            [rand_num, rand_num, rand_num, 0],
                            [rand_num, rand_num, rand_num, -6],
                            [0, 0, 0, 1],
                        ],
                    ],
                    dtype="int",
                ),
                36,
                -9,
                [[-6, 4, -4], [2, 8, 1]],
                [
                    [[-3.5, 3.5, -2.0], [9, 0, -6], [-6, 3, 8], 2.5],
                    [[2.0, 1.0, 5.0], [0, 4, 3], [1, -9, 6], 25.0],
                ],
                [
                    np.array(
                        [
                            [0.91168461, -0.34188173, 0.22792115, 2.0],
                            [-0.04652421, 0.46524211, 0.88396, 8.0],
                            [-0.40824829, -0.81649658, 0.40824829, 1.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                    np.array(
                        [
                            [-0.21615749, -0.94092085, 0.2606605, -6.0],
                            [-0.18683841, -0.22217524, -0.9569376, 4.0],
                            [0.95831485, -0.25555063, -0.12777531, -4.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
            # Testing that when frame and wrist_jc are composed of lists of floats and r_hand_thickness, and l_hand_thickness values are floats
            (
                [4.0, 7.0, 6.0], [0.0, -5.0, 4.0], [-4.0, 5.0, 3.0], [-3.0, 2.0, -7.0], [1.0, -9.0, 6.0], [-6.0, 3.0, 8.0],
                [
                    [
                        [rand_num, rand_num, rand_num, 0.0],
                        [rand_num, rand_num, rand_num, 4.0],
                        [rand_num, rand_num, rand_num, 3.0],
                        [0, 0, 0, 1],
                    ],
                    [
                        [rand_num, rand_num, rand_num, 9.0],
                        [rand_num, rand_num, rand_num, 0.0],
                        [rand_num, rand_num, rand_num, -6.0],
                        [0, 0, 0, 1],
                    ],
                ],
                36.0,
                -9.0,
                [[-6, 4, -4], [2, 8, 1]],
                [
                    [[-3.5, 3.5, -2.0], [9, 0, -6], [-6, 3, 8], 2.5],
                    [[2.0, 1.0, 5.0], [0, 4, 3], [1, -9, 6], 25.0],
                ],
                [
                    np.array(
                        [
                            [0.91168461, -0.34188173, 0.22792115, 2.0],
                            [-0.04652421, 0.46524211, 0.88396, 8.0],
                            [-0.40824829, -0.81649658, 0.40824829, 1.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                    np.array(
                        [
                            [-0.21615749, -0.94092085, 0.2606605, -6.0],
                            [-0.18683841, -0.22217524, -0.9569376, 4.0],
                            [0.95831485, -0.25555063, -0.12777531, -4.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
            # Testing that when frame and wrist_jc are composed of numpy arrays of floats and r_hand_thickness, and l_hand_thickness values are floats
            (
                np.array([4.0, 7.0, 6.0], dtype="float"), np.array([0.0, -5.0, 4.0], dtype="float"),
                np.array([-4.0, 5.0, 3.0], dtype="float"), np.array([-3.0, 2.0, -7.0], dtype="float"),
                np.array([1.0, -9.0, 6.0], dtype="float"), np.array([-6.0, 3.0, 8.0], dtype="float"),
                np.array(
                    [
                        [
                            [rand_num, rand_num, rand_num, 0.0],
                            [rand_num, rand_num, rand_num, 4.0],
                            [rand_num, rand_num, rand_num, 3.0],
                            [0, 0, 0, 1],
                        ],
                        [
                            [rand_num, rand_num, rand_num, 9.0],
                            [rand_num, rand_num, rand_num, 0.0],
                            [rand_num, rand_num, rand_num, -6.0],
                            [0, 0, 0, 1],
                        ],
                    ],
                    dtype="float",
                ),
                36.0,
                -9.0,
                [[-6, 4, -4], [2, 8, 1]],
                [
                    [[-3.5, 3.5, -2.0], [9, 0, -6], [-6, 3, 8], 2.5],
                    [[2.0, 1.0, 5.0], [0, 4, 3], [1, -9, 6], 25.0],
                ],
                [
                    np.array(
                        [
                            [0.91168461, -0.34188173, 0.22792115, 2.0],
                            [-0.04652421, 0.46524211, 0.88396, 8.0],
                            [-0.40824829, -0.81649658, 0.40824829, 1.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                    np.array(
                        [
                            [-0.21615749, -0.94092085, 0.2606605, -6.0],
                            [-0.18683841, -0.22217524, -0.9569376, 4.0],
                            [0.95831485, -0.25555063, -0.12777531, -4.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
        ],
    )
    def test_hand_joint_center(
        self, rwra, rwrb, lwra, lwrb, rfin, lfin, wrist_jc, r_hand_thickness, l_hand_thickness, mock_return_val, expected_mock_args, expected,
    ):
        """
        This test provides coverage of the hand_joint_center function in axis.py, defined as
        hand_joint_center(rwra, rwrb, lwra, lwrb, rfin, lfin, wrist_jc, r_hand_thickness, l_hand_thickness)

        This test takes 11 parameters:
        rwra: 1x3 RWRA marker
        rwrb: 1x3 RWRB marker
        lwra: 1x3 LWRA marker
        lwrb: 1x3 LWRB marker
        rfin: 1x3 RFIN marker
        lfin: 1x3 LFIN marker
        wrist_jc: array containing the x,y,z position of the wrist joint center
        r_hand_thickness: the thickness of the right hand
        l_hand_thickness: the thickness of the left hand
        mock_return_val: the value to be returned by the mock for find_joint_center
        expected_mock_args: the expected arguments used to call the mocked function, find_joint_center
        expected: the expected result from calling hand_joint_center on frame, wrist_jc, r_hand_thickness, and l_hand_thickness

        This test is checking to make sure the hand joint axis is calculated correctly given the input parameters.
        This tests mocks find_joint_center to make sure the correct parameters are being passed into it given the parameters
        passed into hand_joint_center, and to also ensure that hand_joint_center returns the correct value considering
        the return value of find_joint_center, mock_return_val.

        Using RWRA, RWRB, LWRA, and LWRB from the given frame dictionary,
        RWRI = (RWRA+RWRB)/2
        LWRI = (LWRA+LWRB)/2
        aka the midpoints of the markers for each direction.

        LHND is calculated using the Rodriques' rotation formula with the LWRI, LWJC, and LFIN as reference points. The thickness of the left hand is also applied in the calculations.
        The same can be said for the RHND, but with respective markers and measurements (aka RWRI, RWJC, and RFIN).
        z_axis = LWJC - LHND
        y-axis = LWRI - LRWA
        x-axis = y-axis \cross z-axis
        y-axis = z-axis \cross x-axis

        This is for the handJC left axis, and is the same for the right axis but with the respective markers.
        The origin for each direction is calculated by adding each axis to each HND marker.

        Lastly, it checks that the resulting output is correct when frame and wrist_jc are composed of lists of ints,
        numpy arrays of ints, lists of floats, and numpy arrays of floats and r_hand_thickness, and l_hand_thickness values are either an int or a float.
        wrist_jc cannot be a numpy array due to it not being shaped like a multi-dimensional array.
        """
        
        with patch.object(
            axis.CalcUtils, "find_joint_center", side_effect=mock_return_val
        ) as mock_find_joint_center:
            result = axis.CalcAxes().hand_axis(rwra, rwrb, lwra, lwrb, rfin, lfin, wrist_jc, r_hand_thickness, l_hand_thickness)

        # Asserting that there were only 2 calls to find_joint_center
        np.testing.assert_equal(mock_find_joint_center.call_count, 2)

        # Asserting that the correct params were sent in the 1st (left) call to find_joint_center
        np.testing.assert_almost_equal(expected_mock_args[0][0], mock_find_joint_center.call_args_list[0][0][0], rounding_precision)
        np.testing.assert_almost_equal(expected_mock_args[0][1], mock_find_joint_center.call_args_list[0][0][1], rounding_precision)
        np.testing.assert_almost_equal(expected_mock_args[0][2], mock_find_joint_center.call_args_list[0][0][2], rounding_precision)
        np.testing.assert_almost_equal(expected_mock_args[0][3], mock_find_joint_center.call_args_list[0][0][3], rounding_precision)

        ## Asserting that the correct params were sent in the 2nd (right) call to find_joint_center
        np.testing.assert_almost_equal(expected_mock_args[1][0], mock_find_joint_center.call_args_list[1][0][0], rounding_precision)
        np.testing.assert_almost_equal(expected_mock_args[1][1], mock_find_joint_center.call_args_list[1][0][1], rounding_precision)
        np.testing.assert_almost_equal(expected_mock_args[1][2], mock_find_joint_center.call_args_list[1][0][2], rounding_precision)
        np.testing.assert_almost_equal(expected_mock_args[1][3], mock_find_joint_center.call_args_list[1][0][3], rounding_precision)

        ## Asserting that findShoulderJC returned the correct result given the return value given by mocked find_joint_center
        np.testing.assert_almost_equal(result[0], expected[0], rounding_precision)
        np.testing.assert_almost_equal(result[1], expected[1], rounding_precision)